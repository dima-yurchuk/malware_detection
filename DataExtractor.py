from abc import ABC, abstractmethod

import json
from jsonpath_ng import jsonpath, parse


class DataExtractor(ABC):
    @abstractmethod
    def _read_data_from_file(self):
        pass

    @abstractmethod
    def _get_data_if_key_exist(self):
        pass

    @abstractmethod  
    def process(self): 
        pass

class DataExtractorJSON(DataExtractor):
    def __init__(self):
        self.data_from_file = None

    def _read_data_from_file(self, file_path):
        with open(file_path, 'r') as json_file:
            data_from_file = json.load(json_file)
            self.data_from_file = data_from_file

    def _get_data_if_key_exist(self, headers, is_file_malware):
        data_for_model = []

        main_info_key = '$..target' 
        jsonpath_expr_info_key = parse(main_info_key)    
        matches_main_info = [match.value for match in jsonpath_expr_info_key.find(self.data_from_file)]

        if is_file_malware != None:
            file_hash_key = '$..md5' 
            jsonpath_expr_hash_key = parse(file_hash_key)    
            matches_hash = [match.value for match in jsonpath_expr_hash_key.find(matches_main_info)]

            data_for_model.append(matches_hash[0] if matches_hash and matches_hash[0] else '')

        pe_imports_key = '$..pe_imports' 
        jsonpath_expr_pe_imports_key = parse(pe_imports_key)
        matches_pe_imports = [match.value for match in jsonpath_expr_pe_imports_key.find(self.data_from_file)]

        if matches_pe_imports:
            import_name_key = '$..name' 
            jsonpath_expr_import_name_key = parse(import_name_key)
            matches_import_name = [match.value for match in jsonpath_expr_import_name_key.find(matches_pe_imports)]

            for key in headers:
                if key in matches_import_name:
                   data_for_model.append(1)
                else:
                    data_for_model.append(0)
        else:
            data_for_model += 1000 * [0]  
        if is_file_malware != None:             
            if is_file_malware:               
                data_for_model.append(1)
            else: 
                data_for_model.append(0)
    
        return data_for_model 
    
    def process(self, file_path, headers, is_file_malware=None): 
       self._read_data_from_file(file_path)

       return self._get_data_if_key_exist(headers, is_file_malware) 
